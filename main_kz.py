import os
import re
import time
import asyncio
import tempfile
import numpy as np
from PIL import Image
import streamlit as st
from datetime import datetime
from selenium import webdriver
from google.cloud import vision
from pyzbar.pyzbar import decode
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

agree_getid = False
magican = True
magic_str = {}

os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "./credentials.json"


def detect_text(image):
    text_list = []
    obj_list = []

    client = vision.ImageAnnotatorClient()
    image_content = image.read()

    image = vision.Image(content=image_content)
    obj_response = client.object_localization(image=image)
    objects = obj_response.localized_object_annotations
    text_response = client.text_detection(image=image)
    texts = text_response.text_annotations

    for text in texts:
        text_list.append(text.description)
    for obj in objects:
        obj_list.append(obj.name)
    return text_list, obj_list


async def getid(IIN):
    try:
        chromePath = "S:/chromedriver.exe"

        chrome_options = webdriver.ChromeOptions()
        chrome_options.add_argument(
            "--window-position=1400,0"
        )  # –ø–æ–∑–∏—Ü–∏—è –æ–∫–Ω–∞ –Ω–∞ –≤—Ç–æ—Ä–æ–º –º–æ–Ω–∏—Ç–æ—Ä–µ
        chrome_options.add_argument("--window-size=800,800")  # —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞

        driver = webdriver.Chrome(
            executable_path=chromePath, chrome_options=chrome_options
        )
        driver.get(
            "https://nca.pki.gov.kz/service/pkiorder/create.xhtml;jsessionid=XsLTv517ojwgq2oztVHDiWGX4pbVZ6kYB4XFj9mQ.nca-alma-62?lang=ru&certtemplateAlias=individ_ng"
        )

        checkbox = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.ID, "myCheckbox"))
        )
        checkbox.click()

        button = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.ID, "buttonAcceptAgreement"))
        )
        button.click()
        element = driver.find_element(By.ID, "updatePanel_content")
        time.sleep(2)
        element.screenshot("./doc/screenshot.png")
        with Image.open("./doc/screenshot.png") as image:
            temp_image_path = tempfile.mkstemp(suffix=".png")[1]
            image.save(temp_image_path)
            with open(temp_image_path, "rb") as temp_image:
                capcha_list, _ = detect_text(temp_image)
                capcha = list(filter(lambda x: len(x) == 5, capcha_list))

        captcha_input = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//input[@id='captcha']"))
        )
        captcha_input.clear()
        captcha_input.send_keys(capcha)

        value_input = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable(
                (By.XPATH, "//input[@id='rcfield:0:inputValue']")
            )
        )
        value_input.clear()
        value_input.send_keys(IIN)

        button = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.ID, "rcfield:0:checkPersonButton"))
        )
        button.click()
        time.sleep(2)

        first_name_element = driver.find_element(By.ID, "rcfield:1:values")
        last_name_element = driver.find_element(By.ID, "rcfield:2:values")
        middle_name_element = driver.find_element(By.ID, "rcfield:3:values")

        first_name = first_name_element.text
        last_name = last_name_element.text
        middle_name = middle_name_element.text

        driver.quit()
        await asyncio.sleep(2)
        return first_name, last_name, middle_name
    except Exception as e:
        return st.warning(
            f"–ü—Ä–æ–≤–µ—Ä—è–µ–º—ã–π –ò–ò–ù {IIN}, —É–∫–∞–∑–∞–Ω—ã–π –≤ –í–∞—à–µ–º –∑–∞–ø—Ä–æ—Å–µ, –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–π –ë–∞–∑–µ –î–∞–Ω–Ω—ã—Ö –§–∏–∑–∏—á–µ—Å–∫–∏—Ö –õ–∏—Ü. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ò–ò–ù.",
            icon="‚ö†Ô∏è",
        )


def detec_date(list_of_strings):
    matches = []
    birth_date = None
    IIN = None
    ID_DOC = None
    date_regex = r"\b(\d{2}\.\d{2}\.\d{4})\b"

    for text in list_of_strings:
        date_matches = re.findall(date_regex, text)
        matches.extend(date_matches)
        if text.isdigit() and len(text) == 12:
            IIN = text
            print("IIN: ", text)
            date_object = datetime.strptime(text[:6], "%y%m%d")
            birth_date = date_object.strftime("%d.%m.%y")
        elif text.isdigit() and len(text) >= 4:
            ID_DOC = text
            print("ID_DOC: ", text)
    if not matches:
        st.error("“ö“±–∂–∞—Ç—Ç—ã“£ –±—ñ—Ä –∂–∞“ì—ã–Ω–¥–∞ –∫“Ø–Ω–¥—ñ —Ç–∞–±—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã.")
        return

    dates_as_datetime = [datetime.strptime(date, "%d.%m.%Y") for date in matches]
    max_date = max(dates_as_datetime)
    max_date_formatted = max_date.strftime("%d.%m.%y")
    if birth_date != max_date_formatted:
        current_date = datetime.now()
        remaining_time = max_date - current_date

        if remaining_time.days > 0:
            years = remaining_time.days // 365
            months = (remaining_time.days % 365) // 30
            remaining_days = remaining_time.days - years * 365 - months * 30
            st.warning(
                f"“ö“±–∂–∞—Ç—Ç—ã“£ –º–µ—Ä–∑—ñ–º—ñ {years} –∂—ã–ª—ã, {months} –∞–π—ã, {remaining_days} –∫“Ø–Ω—ñ –∞—è“õ—Ç–∞–ª–∞–¥—ã",
                icon="‚ùî",
            )
        else:
            st.error("“ö“∞–ñ–ê–¢–¢–´“¢ –ú–ï–†–ó–Ü–ú–Ü –ê–Ø“ö–¢–ê–õ–î–´!", icon="‚ö†Ô∏è")
    print("Max date: ", max_date_formatted, birth_date)
    return IIN, ID_DOC


def detect_barcode(image):
    image_np = np.array(Image.open(image))
    decoded_objects = decode(image_np)
    barcodes = []
    for obj in decoded_objects:
        barcodes.append(obj.data.decode("utf-8"))
    return barcodes[0] if barcodes else None


def check_edit(image):
    with Image.open(image) as img:
        metadata = img.info
        print("img.info: ", img.info)
        if "Software" in metadata:
            return metadata["Software"]
        else:
            return False


def detect_and_print_info(front_file, back_file, agree_getid):
    (
        front_text_list,
        front_obj_list,
    ) = detect_text(front_file)
    (
        back_text_list,
        back_obj_list,
    ) = detect_text(back_file)

    if detect_barcode(front_file) is not None:
        print("-" * 89)
        print("Front barcodes: ", detect_barcode(front_file))
    if detect_barcode(back_file) is not None:
        print("-" * 89)
        print("Back barcodes: ", detect_barcode(back_file))

    print("-" * 89)
    print("front_text_list: ", front_text_list[1:])
    print("front_obj_list: ", front_obj_list)

    print("-" * 89)
    print("back_text_list: ", back_text_list[1:])
    print("back_obj_list: ", back_obj_list)

    if (
        "–ö–£”ò–õ–Ü–ö" in front_text_list and "–£–î–û–°–¢–û–í–ï–†–ï–ù–ò–ï" in front_text_list
    ) and front_obj_list[0] == "Person":
        st.toast("“ö“∞–ñ–ê–¢ –ê–ù–´“ö–¢–ê–õ–î–´: –ñ–ï–ö–ï –ö–£”ò–õ–Ü–ö", icon="‚úÖ")
        IINF, ID_DOCF = detec_date(front_text_list[1:])
        IINB, ID_DOCB = detec_date(back_text_list[1:])

        if detect_barcode(back_file) == IINF:
            st.success("–®–¢–†–ò–• –ö–û–î –†–ê–°–¢–ê–õ–î–´", icon="‚úÖ")
        else:
            st.warning("–®–¢–†–ò–• –ö–û–î –ñ–ê–°–ê–ù–î–´", icon="‚ö†Ô∏è")

    elif (
        "DRIVING" in front_text_list and "LICENCE" in front_text_list
    ) and front_obj_list[0] == "Person":
        st.toast("“ö“∞–ñ–ê–¢ –ê–ù–´“ö–¢–ê–õ–î–´: –ñ“Æ–†–ì–Ü–ó–£–®–Ü –ö–£”ò–õ–Ü–ì–Ü", icon="‚úÖ")
        IINF, ID_DOCF = detec_date(front_text_list[1:])

    elif (front_obj_list[0] == "1D barcode") and (
        "–°–í–ò–î–ï–¢–ï–õ–¨–°–¢–í–û" and "–†–û–ñ–î–ï–ù–ò–ò" in front_text_list
    ):
        st.toast("“ö“∞–ñ–ê–¢ –ê–ù–´“ö–¢–ê–õ–î–´: –¢–£–£ –¢–£–†–ê–õ–´ –ö–£”ò–õ–Ü–ö", icon="‚úÖ")
        st.warning("–î–û–ö–£–ú–ï–ù–¢ –Ø–í–õ–Ø–ï–¢–°–Ø –ë–ï–ó –°–†–û–ß–ù–´–ú", icon="‚ö†Ô∏è")
    elif (front_obj_list[0] == "2D barcode") and (
        "–ê–í–¢–û–†–õ–´“ö" or "–ê–í–¢–û–†–°–ö–ò–ú" in front_text_list):
        st.toast("“ö“∞–ñ–ê–¢ –ê–ù–´“ö–¢–ê–õ–î–´: –ú–ï–ù–®–Ü–ö “ö“∞“ö–´“í–´ –¢–£–†–ê–õ–´ –ö–£”ò–õ–Ü–ö", icon="‚úÖ")
        st.warning("–î–û–ö–£–ú–ï–ù–¢ –Ø–í–õ–Ø–ï–¢–°–Ø –ë–ï–ó –°–†–û–ß–ù–´–ú", icon="‚ö†Ô∏è")
    else:
        st.toast("“ö“∞–ñ–ê–¢ –ê–ù–´“ö–¢–ê–õ–ú–ê“í–ê–ù!", icon="‚ö†Ô∏è")

    if agree_getid:
        with st.spinner("–ë–∞–∑–∞“ì–∞ —Å“±—Ä–∞—É –æ—Ä—ã–Ω–¥–∞–ª—É–¥–∞..."):
            loop = asyncio.new_event_loop()
            try:
                gov_f, gov_l, gov_m = loop.run_until_complete(getid(IINF))
                loop.close()
            except Exception as e:
                print("–û—Ä—ã–Ω–¥–∞–ª–º–∞–¥—ã")
                loop.close()
            if (
                gov_f in front_text_list[1:]
                and gov_l in front_text_list[1:]
                and gov_m in front_text_list[1:]
            ):
                st.success(
                    "–ñ–°–ù –ë–û–ô–´–ù–®–ê –î–ï–†–ï–ö–¢–ï–† “ö“∞–ñ–ê–¢–¢–ê–† –ë–û–ô–´–ù–®–ê –°”ò–ô–ö–ï–° –ö–ï–õ–ú–ï–ô–î–Ü", icon="‚úÖ"
                )
            else:
                st.warning(
                    "–ñ–°–ù –ë–û–ô–´–ù–®–ê –î–ï–†–ï–ö–¢–ï–† “ö“∞–ñ–ê–¢–¢–ê–† –ë–û–ô–´–ù–®–ê –°”ò–ô–ö–ï–° –ö–ï–õ–ú–ï–ô–î–Ü", icon="‚ö†Ô∏è"
                )

    if "“ö–ê–ó–ê“ö–°–¢–ê–ù" in front_text_list or "–ö–ê–ó–ê–ö–°–¢–ê–ù" in front_text_list:
        id_count = "–ö–∞–∑–∞“õ—Å—Ç–∞–Ω"
        ico = "üá∞üáø"
    else:
        id_count = "–®–µ—Ç–µ–ª–¥—ñ–∫"
        ico = "üá∑üá∫"
    st.success(f"“ö“±–∂–∞—Ç: {id_count} “õ“±–∂–∞—Ç", icon=f"{ico}")

    edited_software = check_edit(front_file) or check_edit(back_file)
    if edited_software:
        st.error(f"–°—É—Ä–µ—Ç ”©“£–¥–µ–ª–≥–µ–Ω: {edited_software}", icon="‚ö†Ô∏è")
    else:
        st.success("–ö–µ—Å–∫—ñ–Ω –º–µ—Ç–∞–¥–µ—Ä–µ–∫—Ç–µ—Ä—ñ–Ω–¥–µ “õ–∞—Ç–µ–ª–µ—Ä —Ç–∞–±—ã–ª“ì–∞–Ω –∂–æ“õ", icon="‚úÖ")
    print("agree_getid: ", agree_getid)


st.title("“ö“±–∂–∞—Ç—Ç–∞—Ä–¥—ã —Ç–∞–Ω—É –∂”ô–Ω–µ —Ç“Ø–ø–Ω“±—Å“õ–∞–ª—ã“ì—ã–Ω —Ç–µ–∫—Å–µ—Ä—É")
st.text(
    """–ñ“Ø–π–µ–Ω—ñ“£ –Ω–µ–≥—ñ–∑–≥—ñ –º–∞“õ—Å–∞—Ç—ã - “õ“±–∂–∞—Ç—Ç—ã“£ —Ç“Ø–ø–Ω“±—Å“õ–∞–ª—ã“ì—ã–Ω —Ç–µ–∫—Å–µ—Ä—É.
“ö“±–∂–∞—Ç —Ç“Ø—Ä–ª–µ—Ä—ñ / —Ç–µ–∫—Å–µ—Ä—ñ–ª–µ—Ç—ñ–Ω “õ“±–∂–∞—Ç —Ç“Ø—Ä–ª–µ—Ä—ñ “õ–∞—Ç—ã—Å—É—à—ã–ª–∞—Ä —Ç–∞—Ä–∞–ø—ã–Ω–∞–Ω ”©–∑–¥—ñ–≥—ñ–Ω–µ–Ω –∞–Ω—ã“õ—Ç–∞–ª–∞–¥—ã.
“ö–∞–Ω–¥–∞–π “õ“±–∂–∞—Ç—Ç–∞—Ä —Ç–µ–∫—Å–µ—Ä—ñ–ª–µ–¥—ñ. –ú—ã—Å–∞–ª—ã, –±–µ–ª–≥—ñ–ª—ñ –±—ñ—Ä –µ–ª–¥—ñ“£ —Ç”©–ª“õ“±–∂–∞—Ç—ã,
–∂“Ø—Ä–≥—ñ–∑—É—à—ñ –∫—É”ô–ª—ñ–≥—ñ, —Ç—É—É —Ç—É—Ä–∞–ª—ã –∫—É”ô–ª—ñ–∫, –º–µ–Ω—à—ñ–∫ “õ“±“õ—ã“ì—ã —Ç—É—Ä–∞–ª—ã –∫—É”ô–ª—ñ–∫
–∂”ô–Ω–µ —Ç.–±. –ñ“Ø–π–µ –∞–ª–¥—ã–Ω –∞–ª–∞ –∞–Ω—ã“õ—Ç–∞–ª“ì–∞–Ω “õ“±–∂–∞—Ç —Ç“Ø—Ä–ª–µ—Ä—ñ–Ω —Å–µ–Ω—ñ–º–¥—ñ —Ç“Ø—Ä–¥–µ —Ç–µ–∫—Å–µ—Ä—ñ–ø,
–∂–∞—Ä–∞–º—Å—ã–∑ –Ω–µ–º–µ—Å–µ –º–µ—Ä–∑—ñ–º—ñ ”©—Ç–∫–µ–Ω “õ“±–∂–∞—Ç—Ç—ã –∞–Ω—ã“õ—Ç–∞“ì–∞–Ω –∂–∞“ì–¥–∞–π–¥–∞ —Å–∏–≥–Ω–∞–ª –±–µ—Ä–µ–¥—ñ."""
)

col1, col2 = st.columns(2)

uploaded_files = st.file_uploader(
    "“ö“±–∂–∞—Ç—Ç—ã –∂“Ø–∫—Ç–µ“£—ñ–∑...", type=["png", "jpeg", "jpg"], accept_multiple_files=True
)
if uploaded_files is not None:
    if len(uploaded_files) == 1:
        with col1:
            st.image(uploaded_files[0], width=300)
    elif len(uploaded_files) >= 2:
        with col1:
            st.image(uploaded_files[0], width=300)
        with col2:
            st.image(uploaded_files[1], width=300)

with st.popover("–ò–ò–ù –º–µ–Ω —Ç–µ–∫—Å–µ—Ä—É"):
    Input_IIN = st.text_input("12 —Å–∞–Ω–¥—ã –ñ–°–ù —Ç–µ—Ä—ñ“£—ñ–∑:")
    if len(Input_IIN) == 12:
        with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...."):
            loop = asyncio.new_event_loop()
            try:
                gov_f, gov_l, gov_m = loop.run_until_complete(getid(Input_IIN))
                loop.close()
            except Exception as e:
                Input_IIN = st.text_input("12 —Å–∞–Ω–¥—ã –ñ–°–ù —Ç–µ—Ä—ñ“£—ñ–∑:", value="")
                print("–û—Ä—ã–Ω–¥–∞–ª–º–∞–¥—ã")
            loop.close()
            magic_str = {
                "–ñ–°–ù/–ò–ò–ù": Input_IIN,
                "–¢–µ–≥—ñ/–§–∞–º–∏–ª–∏—è": gov_f,
                "–ê—Ç—ã/–ò–º—è": gov_l,
                "”ò–∫–µ—Å—ñ–Ω—ñ“£ –∞—Ç—ã/–û—Ç—á–µ—Å—Ç–≤–æ": gov_m,
            }
            magican = True
            Input_IIN = st.text_input("12 —Å–∞–Ω–¥—ã –ñ–°–ù —Ç–µ—Ä—ñ“£—ñ–∑:", value="")
agree_getid = st.checkbox("–°–µ—Ä–≤–∏—Å –∞—Ä“õ—ã–ª—ã –ñ–°–ù —Ç–µ–∫—Å–µ—Ä—É", value=False)
if st.button("–û—Ä—ã–Ω–¥–∞—É", type="primary"):
    print("*" * 40, "RUNNING PROGRAMM", "*" * 40)
    if uploaded_files[0] is not None and uploaded_files[1] is not None:
        print_detect = detect_and_print_info(
            uploaded_files[0], uploaded_files[1], agree_getid
        )
    else:
        st.error("“ö“±–∂–∞—Ç—Ç—ã“£ –µ–∫—ñ –∂–∞“ì—ã–Ω –∂“Ø–∫—Ç–µ—É “õ–∞–∂–µ—Ç!", icon="‚ö†Ô∏è")
if magican:
    for key, value in magic_str.items():
        st.header(f"{key} : {value}")
